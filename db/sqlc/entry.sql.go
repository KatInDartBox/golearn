// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: entry.sql

package sqlc

import (
	"context"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entry (
  account_id ,
  amount,
  note
) VALUES (
  $1, $2, $3
)
RETURNING id, account_id, amount, note
`

type CreateEntryParams struct {
	AccountID int64  `json:"account_id"`
	Amount    int64  `json:"amount"`
	Note      string `json:"note"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntry, arg.AccountID, arg.Amount, arg.Note)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.Note,
	)
	return i, err
}

const getEntry = `-- name: GetEntry :one
SELECT id, account_id, amount, note FROM entry
where id=$1
`

func (q *Queries) GetEntry(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.Note,
	)
	return i, err
}

const getEntryList = `-- name: GetEntryList :many
SELECT id, account_id, amount, note FROM entry
where id>=$1::bigint AND id<=$2::bigint
`

type GetEntryListParams struct {
	FromID int64 `json:"from_id"`
	ToID   int64 `json:"to_id"`
}

func (q *Queries) GetEntryList(ctx context.Context, arg GetEntryListParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, getEntryList, arg.FromID, arg.ToID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.Note,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
