// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: account.sql

package sqlc

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO account (
  holder ,
  balance 
) VALUES (
  $1, $2
)
RETURNING id, holder, balance
`

type CreateAccountParams struct {
	Holder  string `json:"holder"`
	Balance int64  `json:"balance"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Holder, arg.Balance)
	var i Account
	err := row.Scan(&i.ID, &i.Holder, &i.Balance)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, holder, balance FROM account
where id=$1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(&i.ID, &i.Holder, &i.Balance)
	return i, err
}

const getAccountList = `-- name: GetAccountList :many
select id, holder, balance from account where id > $1::bigint limit $2::bigint
`

type GetAccountListParams struct {
	LastID    int64 `json:"last_id"`
	PageLimit int64 `json:"page_limit"`
}

func (q *Queries) GetAccountList(ctx context.Context, arg GetAccountListParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAccountList, arg.LastID, arg.PageLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(&i.ID, &i.Holder, &i.Balance); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountBalance = `-- name: UpdateAccountBalance :one
update account set 
balance=balance + $1::bigint 
where id=$2::bigint  returning id, holder, balance
`

type UpdateAccountBalanceParams struct {
	Balance int64 `json:"balance"`
	ID      int64 `json:"id"`
}

func (q *Queries) UpdateAccountBalance(ctx context.Context, arg UpdateAccountBalanceParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccountBalance, arg.Balance, arg.ID)
	var i Account
	err := row.Scan(&i.ID, &i.Holder, &i.Balance)
	return i, err
}
